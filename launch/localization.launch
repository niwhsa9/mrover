<launch>
    <arg name="sim" default="false" />
    <arg name="use_ekf" default="true" />
    <arg name="ekf_start_delay" default="0" />
    <arg name="use_both_gps" default="true" />

    <rosparam command="load" file="$(find mrover)/config/localization.yaml" />
    <rosparam command="load" file="$(find mrover)/config/esw.yaml" />
    <rosparam command="load" file="$(find mrover)/config/inv_ekf.yaml" />
    <rosparam if="$(arg sim)" command="load" file="$(find mrover)/config/sim_ekf.yaml" />
    <rosparam unless="$(arg sim)" command="load" file="$(find mrover)/config/ekf.yaml" />

    <!-- <node if="$(arg use_ekf)"
        pkg="robot_localization" type="ekf_localization_node" name="global_ekf"
        clear_params="true" launch-prefix="bash -c 'sleep $(arg ekf_start_delay); $0 $@'">
        <remap from="odometry/filtered" to="global_ekf/odometry" />
    </node> -->

    <!-- Invariant EKF -->
    <node if="$(arg use_ekf)" name="inv_ekf" pkg="mrover" type="invariant_ekf" output="screen" 
        launch-prefix="bash -c 'sleep 5; $0 $@'" />

    <!-- Passthrough filter to replace EKF in data path -->
    <!-- <node unless="$(arg use_ekf)"
          pkg="mrover" type="passthrough_filter.py"
          name="passthrough_filter" /> -->

    <!-- Linearize GPS from geodetic to ENU cartesian coords -->
    <node name="gps_linearization" pkg="mrover" type="gps_linearization.py" output="screen" />

    <!-- Launch IMU driver -->
    <node unless="$(arg sim)" name="imu_driver" pkg="mrover" type="imu_driver.py" output="screen" />

    <!-- Launch GPS driver(s) -->
    <group ns="right_gps_driver" unless="$(arg sim)">
        <node if="$(arg use_both_gps)" pkg="mrover" type="gps_driver.py" name="gps_driver" output="screen"/>
    </group>

    <group ns="left_gps_driver" unless="$(arg sim)">
        <node pkg="mrover" type="gps_driver.py" name="gps_driver" output="screen"/>
    </group>

</launch>