<!-- This launch file launches all nodes necessary for autonomous navigation. -->
<launch>
  <arg name="run_tag_detector" default="true"/>
  <arg name="sim" default="false"/>
  <arg name="use_ekf" default="true"/>
  <arg name="ekf_start_delay" default="0"/>

  <!--
    ==========
    Perception
    ==========
  -->
  <node pkg="nodelet" type="nodelet" name="perception_nodelet_manager" respawn="true"
        args="manager" output="screen"/>
  <!-- nodelet to detect AR tags and publish them to the TF tree -->
  <node if="$(arg run_tag_detector)"
        pkg="nodelet" type="nodelet" name="tag_detector" respawn="true"
        args="load mrover/TagDetectorNodelet perception_nodelet_manager" output="screen"/>

  <!--
    ===========
    Navigation
    ===========
  -->
  <!-- node to navigate to a series of waypoints, AR tags, and gates -->
  <rosparam command="load" file="$(find mrover)/config/navigation.yaml"/>
  <node name="nav" pkg="mrover" type="navigation.py"/>
  <node name="failure_id" pkg="mrover" type="failure_identification.py"/>

  <!--
    ============
    Localization
    ============
  -->
  <rosparam command="load" file="$(find mrover)/config/localization.yaml"/>
  <rosparam if="$(arg sim)" command="load" file="$(find mrover)/config/sim_ekf.yaml"/>
  <rosparam unless="$(arg sim)" command="load" file="$(find mrover)/config/ekf.yaml"/>

  <!-- global EKF -->
  <node if="$(arg use_ekf)" pkg="robot_localization" type="ekf_localization_node" name="global_ekf"
        clear_params="true" launch-prefix="bash -c 'sleep $(arg ekf_start_delay); $0 $@'">
    <remap from="odometry/filtered" to="global_ekf/odometry"/>
  </node>

  <!-- passthrough filter to replace EKF in datapath -->
  <node unless="$(arg use_ekf)" pkg="mrover" type="passthrough_filter.py" name="passthrough_filter"/>

  <!-- node to linearize GPS from geodetic to ENU cartesian coords -->
  <node name="gps_linearization" pkg="mrover" type="gps_linearization.py" output="screen"/>
</launch>
