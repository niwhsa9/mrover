<!-- 
  This launch file launches all of the nodes necessary for autonomous navigation.
    
    :arg run_perception: true/false value deciding whether or not to run perception as
                         part of the auton system. Should only be used for testing.
 -->
<launch>
    <arg name="run_perception" default="true"/>
    <arg name="sim" default="false"/>
    <arg name="use_ekf" default="true"/>
    <arg name="ekf_start_delay" default="0"/>

    <!--
      ==========
      Perception
      ==========
    -->
    <!-- node to detect AR tags and publish them to the TF tree -->
    <node if="$(arg run_perception)" name="tag_detector" pkg="mrover" type="tag_detector"/>

    <!--
      ===========
      Navigation
      ===========
    -->
    <!-- node to navigate to a series of waypoints, AR tags, and gates -->
    <rosparam command="load" file="$(find mrover)/config/navigation.yaml"/>
    <node name="nav" pkg="mrover" type="navigation.py"/>

    <!--
      ============
      Localization
      ============
    -->
    <rosparam command="load" file="$(find mrover)/config/localization.yaml"/>
    <rosparam if="$(arg sim)" command="load" file="$(find mrover)/config/sim_ekf.yaml"/>
    <rosparam unless="$(arg sim)" command="load" file="$(find mrover)/config/ekf.yaml"/>

    <!-- global EKF -->
    <node if="$(arg use_ekf)" pkg="robot_localization" type="ekf_localization_node" name="global_ekf"
          clear_params="true" launch-prefix="bash -c 'sleep $(arg ekf_start_delay); $0 $@'">
        <remap from="odometry/filtered" to="global_ekf/odometry"/>
    </node>

    <!-- passthrough filter to replace EKF in datapath -->
    <node unless="$(arg use_ekf)" pkg="mrover" type="passthrough_filter.py" name="passthrough_filter"/>

    <!-- node to linearize GPS from geodetic to ENU cartesian coords -->
    <node name="gps_linearization" pkg="mrover" type="gps_linearization.py" output="screen"/>

    <!-- plot the rover trajectory in rviz as it drives -->
    <node name="hectory_trajectory_server" output="screen" pkg="hector_trajectory_server" type="hector_trajectory_server">
        <param name="target_frame_name" type="string" value="map"/>
        <param name="source_frame_name" type="string" value="base_link"/>
        <param name="trajectory_update_rate" type="double" value="4"/>
        <param name="trajectory_publish_rate" type="double" value="4"/>
    </node>
</launch>
