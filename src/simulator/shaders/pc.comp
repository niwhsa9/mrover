#version 450 core

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

// 4x4 matrix
layout (binding = 0) uniform mat4 inClipToCamera;
layout (binding = 1) uniform ivec2 inResolution;
layout (binding = 2, rgb8) uniform image2D inRgbImage;
layout (binding = 3, r32f) uniform image2D inDepthImage;

struct Point {
    float x, y, z;
    float rgb;
    float nx, ny, nz;
    float curvature;
};

layout (std430, binding = 4) buffer outCloud {
    Point points[];
};

void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    float depth = imageLoad(inDepthImage, pixel).r;
    vec3 rgb = imageLoad(inRgbImage, pixel).rgb;

    vec4 pointInClip = vec4(
        2.0 * (float(pixel.x) / float(inResolution.x)) - 1.0,
        2.0 * (float(pixel.y) / float(inResolution.y)) - 1.0,
        2.0 * depth - 1.0,
        1.0
    );
    vec4 pointInCamera = inClipToCamera * pointInClip;
    pointInCamera /= pointInCamera.w;

    int flatIndex = pixel.y * inResolution.x + pixel.x;
        outCloud.points[flatIndex] = Point(
        pointInCamera.x,
        pointInCamera.y,
        pointInCamera.z,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
    );
}
