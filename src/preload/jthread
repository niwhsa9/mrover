#pragma once

// macOS does not have std::jthread yet
// So we define it ourselves.
// https://en.cppreference.com/w/cpp/thread/jthread
// This implementation is missing stop_token support

#ifdef __APPLE__
#include <fmt/core.h>
#include <thread>

namespace std {
class jthread {
public:
  template <typename Function, typename... Args>
  explicit jthread(Function &&f, Args &&...args)
      : mThread(std::forward<Function>(f), std::forward<Args>(args)...) {}

  ~jthread() {
    if (mThread.joinable()) {
      mThread.join();
    }
  }

  jthread(jthread const &) = delete;
  auto operator=(jthread const &) -> jthread & = delete;

  jthread(jthread &&) = default;
  auto operator=(jthread &&) -> jthread & = default;

  void join() { mThread.join(); }

  void detach() { mThread.detach(); }

  FMT_NODISCARD auto get_id() const noexcept -> std::thread::id {
    return mThread.get_id();
  }

  FMT_NODISCARD auto joinable() const noexcept -> bool {
    return mThread.joinable();
  }

private:
  std::thread mThread;
};
} // namespace std
#else
#include_next <thread>
#endif
